<?xml version="1.0" encoding="UTF-8"?>
<!-- 该xml配置中,xml元素大小写不敏感 -->
<!-- status="off",log4j2把自身事件记录到控制台的配置，off表示不记录，其余的记录有trace，debug，info，warn，error，fatal -->
<!-- monitorInterval表示检测更改配置的时间,单位是秒,最小间隔为5秒,0或负数表示不检测 -->
<configuration name="test-cfg" status="off" monitorInterval="0">

    <!-- 常量引用 -->
    <properties>
        <property name="LOG_HOME">/usr/local/blog-website/log</property>
        <property name="FORMAT">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n</property>
    </properties>

    <!-- appender用于接收各种日志 -->
    <appenders>
        <!-- 常见的输出到console,常用于开发环境中,默认是system_err,还有一个system_out -->
        <console name="console" target="system_out">
            <!-- <thresholdFilter level="info" onMatch="accept" onMismatch="deny"/> -->
            <patternLayout pattern="${FORMAT}"/>
        </console>

        <!-- 输出到文件中 采用这个可以将日志写到多个文件中，可以自定义日志分包、日志文件数量控制等。因此建议使用这个 -->
        <RollingRandomAccessFile name="db_log"
                                 filename="${LOG_HOME}/my-blog-db.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/%d{dd}-db-%i.log"
                                 immediateFlush="true">
            <PatternLayout pattern="${FORMAT}" charset="UTF-8" />
            <Policies>
                <SizeBasedTriggeringPolicy size="50 MB" />
            </Policies>
            <!-- 控制文件数量，根据日志名称的i值，最大到10，之后就进行覆盖，默认情况下是7 -->
            <DefaultRolloverStrategy max="10" />

        </RollingRandomAccessFile>

        <!-- 输出到文件中 采用这个可以将日志写到多个文件中，可以自定义日志分包、日志文件数量控制等。因此建议使用这个 -->
        <RollingRandomAccessFile name="service_log"
                                 filename="${LOG_HOME}/my-blog-service.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/%d{dd}-service-%i.log"
                                 immediateFlush="true">
            <PatternLayout pattern="${FORMAT}" charset="UTF-8" />
            <Policies>
                <SizeBasedTriggeringPolicy size="50 MB" />
            </Policies>
            <!-- 控制文件数量，根据日志名称的i值，最大到10，之后就进行覆盖，默认情况下是7 -->
            <DefaultRolloverStrategy max="10" />
        </RollingRandomAccessFile>
    </appenders>

    <!-- 接收appender -->
    <loggers>`
        <logger name="org.apache.http" level="warn"/>
        <!-- Spring -->
        <logger name="org.springframework" level="WARN"/>
        <!-- mybatis loggers -->
        <logger name="com.ibatis" level="DEBUG"/>
        <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG"/>
        <logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG"/>
        <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG"/>
        <!-- sql loggers -->
        <logger name="java.sql.Connection" level="DEBUG" additivity="true"/>
        <logger name="java.sql.Statement" level="DEBUG" additivity="true"/>
        <logger name="java.sql.PreparedStatement" level="=debug,stdout" additivity="true"/>
        <logger name="java.sql.ResultSet" level="DEBUG" additivity="true"/>
        <logger name="org.apache" level="WARN"/>

        <!-- 对包进行更详细的配置 -->
        <!-- additivity表示是否追加,防止重复,因为root已经接收过一次了 -->
        <logger name="com.my.blog.website.dao" level="DEBUG" additivity="true">
            <appender-ref ref="db_log"/>
        </logger>
        <logger name="com.my.blog.website.controller" level="DEBUG" additivity="true">
            <appender-ref ref="service_log"/>
        </logger>
        <logger name="com.my.blog.website.service" level="DEBUG" additivity="true">
            <appender-ref ref="service_log"/>
        </logger>
        <logger name="com.my.blog.website.interceptor.BaseInterceptor" level="DEBUG" additivity="true">
            <appender-ref ref="service_log" />
        </logger>
        <!-- root logger,一般用于放置所有的appender -->
        <root level="INFO">
            <appender-ref ref="console"/>
        </root>
    </loggers>

</configuration>